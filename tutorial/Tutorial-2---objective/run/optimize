#!/usr/bin/env python3
# Standard python library 
import numpy as np 
import IO.user_provided
import objective.setup_objective
import optimizer.gradient_free

# Local library: 

#from objective.force_matching import force_matching
import objective.compute_objective 

# Third party library:

# all input from command line

main_logger, TOTAL_CORES,INPUT,JOBID = IO.user_provided.from_command_line(jobID="1234",total_cores=4,input_file="in_obj").finish_reading() 
#logger, TOTAL_CORES,INPUT,JOBID = IO.user_provided.from_command_line().finish_reading() 

# initialize properties matching: 
ref_dict,predict_dict,argument_dict,LAMMPS,last_line = objective.setup_objective.setup(INPUT,TOTAL_CORES,JOBID,overwrite=True).finish()  

eval_objective = objective.compute_objective.prepare(ref_dict,predict_dict,argument_dict,LAMMPS ) 

optimize_fm = optimizer.gradient_free.NelderMeadSimplex(INPUT,eval_objective,skipped=last_line)

optimize_Himmelblau.run_optimization()


#force_field = np.array([1.0,1.0,0.0,77638.534354,16.148387, -0.471029, 0.770018, 1e-06, 2.19964, 10921.97125, 3.282761, 0.270511, 2.750522,38840.92139 ]) 

#LAMMPS.run( "tersoff",force_field ) 

#job_successfull = LAMMPS.exit() 

#force_matching.load(ref_dict["force"]["ST2"],predict_dict["force"]["ST2"],argument_dict["force"]["ST2"])




